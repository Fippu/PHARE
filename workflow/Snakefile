configfile: "config/config.yaml"
report: "workflow/report/workflow.rst"

sample_ids = glob_wildcards("data/samples/{sample}.fastq")
gene_names = list(config['genes'].keys())


rule read_filter:
	input: samples="data/samples/{sample}.fastq"
	output: "data/scriptfiles/{gene}/{sample}.filtered.fastq"
	params:
		min_mean_q = config['minqual'],
		min_length = lambda w: config['genes'][w.gene]['minlen'] if 'minlen' in config['genes'][w.gene] else config['genes'][w.gene]['targetlen'] - 50,
		max_length = lambda w: config['genes'][w.gene]['maxlen'] if 'maxlen' in config['genes'][w.gene] else config['genes'][w.gene]['targetlen'] + 250,
		# max_length = lambda w: config['genes'][w.gene]["maxlen"],
		# min_length = lambda w: config['genes'][w.gene]["minlen"],
		length_weight = 10
	shell: "filtlong {input.samples} --min_mean_q {params.min_mean_q} --max_length {params.max_length} --min_length {params.min_length} --length_weight {params.length_weight} > {output}"

rule minimap:
	input: rules.read_filter.output
	output: "data/scriptfiles/{gene}/{sample}.sorted.bam"
	threads: 8
	params:
		reference = lambda w: config['genes'][w.gene]["generef"]
	shell: """
		minimap2 -a -t {threads} -x map-ont --MD {params.reference} {input} --sam-hit-only | samtools sort -T tmp -o {output}
		samtools index {output}
	"""

rule snp_finding:
	input: rules.minimap.output
	output: "data/scriptfiles/{gene}/{sample}.sorted.bam.snps"
	params:
		c = lambda w: config['genes'][w.gene]["contig"],
		q = config['minqual'],
		r = lambda w: config['genes'][w.gene]["generef"],
		m = 0.8,
		n = 0.05
	shell: "python workflow/scripts/snp_selector.py {input} -c {params.c} -q {params.q} -n {params.n} -r {params.r} -m {params.m}"

rule snp_list:
	input: expand(["data/scriptfiles/{{gene}}/{sample}.sorted.bam.snps"], sample=sample_ids.sample)
	# input: rules.snp_finding.output
	# input: "data/scriptfiles/{gene}/*.sorted.bam.snps"
	output: "data/scriptfiles/{gene}/snp_list"
	shell: "cat {input} | sort -n | uniq > {output}"


rule filter_silent:
	input: snplist=rules.snp_list.output, samples=rules.minimap.output
	output: "data/scriptfiles/{gene}/{sample}.sorted.bam.non-silent.snps"
	params:
		c = lambda w: config['genes'][w.gene]["contig"],
		q = config['minqual'],
		r = lambda w: config['genes'][w.gene]["generef"],
		g = lambda w: config['genes'][w.gene]["genebank_ref"]
	shell: "python workflow/scripts/filter_silent.py {input.samples} -c {params.c} -g {params.g} -s {input.snplist} -q {params.q} -r {params.r}"

rule nonsilent_snp_list:
	input: expand(["data/scriptfiles/{{gene}}/{sample}.sorted.bam.non-silent.snps"], sample=sample_ids.sample)
	output: "results/{gene}/snp_list"
	shell: "cat {input} | sort -n | uniq > {output}"


rule haplotype_determination:
	input: snplist=rules.nonsilent_snp_list.output, samples=rules.minimap.output
	output: "results/{gene}/{sample}.tsv"
	params:
		c = lambda w: config['genes'][w.gene]["contig"],
		q = config['minqual'],
		r = lambda w: config['genes'][w.gene]["generef"],
		g = lambda w: config['genes'][w.gene]["genebank_ref"]
	shell: "python workflow/scripts/variance_calc.py {input.samples} -c {params.c} -g {params.g} -s {input.snplist} -q {params.q} -o {output}"

rule generate_plot:
	input: expand(["results/{{gene}}/{sample}.tsv"], sample=sample_ids.sample)
	params:
		folder = lambda w: 'results/'+w.gene,
		pattern = '*.tsv',
		fasta_ref = lambda w: config['genes'][w.gene]['generef'],
		gb_report = lambda w: config['genes'][w.gene]['genebank_ref'],
		gene_name = lambda w: w.gene,
		threshold = config['threshold'],
		filter_silent = 1, # IF THIS IS SET TO FALSE, THE RULES FILTER_SILENT AND NONSILENT_SNP_LIST HAVE TO BE REMOVED FROM THE PIPELINE
		min_reads = config['min_reads']
	output: 'results/{gene}_{threshold}.png'
	shell: "Rscript workflow/scripts/analysis.R --folder={params.folder} --pattern={params.pattern} --fasta_ref={params.fasta_ref} --gb_report={params.gb_report} --gene_name={params.gene_name} --threshold={params.threshold} --filter_silent={params.filter_silent} --min_reads={params.min_reads}"


rule all:
	default_target: True
	input: expand("results/{gene}_{threshold}.png", gene=gene_names, threshold=config['threshold'])
